// Copyright 2020 WeDPR Lab Project Authors. Licensed under Apache-2.0.

syntax = "proto3";

package com.webank.wedpr.acv.proto;
option java_package = "com.webank.wedpr.acv.proto";
option java_multiple_files = true;

// Candidate list.
message CandidateList {
  repeated string candidate = 1;
}

// System parameters.
message SystemParametersStorage {
  bytes poll_point = 1;
  CandidateList candidates = 2;
}

// Counter's secret value.
message CounterSecret {
  bytes poll_secret_share = 1;
}

// Voter's secret value.
message VoterSecret {
  bytes voter_secret = 1;
}

// Request of voter's registration.
message RegistrationRequest {
  RegistrationBlindingPoint weight_point = 1;
}

// delete?
message RegistrationBlindingPoint {
  bytes blinding_poll_point = 1;
  bytes blinding_basepoint_g2 = 2;
}

// Response of coordinator for voter's registration.
message RegistrationResponse {
  uint32 voter_weight = 1;
  Ballot ballot = 2;
  bytes signature = 3;
}

// Ciphertext ballot.
message Ballot {
  bytes ciphertext1 = 1;
  bytes ciphertext2 = 2;
}


// Request of generating system parameter from a counter.
message CounterSystemParametersShareRequest {
  string counter_id = 1;
  bytes poll_point_share = 2;
}

// Requests of generating system parameter from all counters.
message CounterSystemParametersStorage {
  repeated CounterSystemParametersShareRequest counter_parameters_request = 1;
}

// Choice of ballot casting for each candidate.
message VoteChoice {
  string candidate = 1;
  uint32 value = 2;
}

// Choices for all candidate.
message VoteChoices {
  repeated VoteChoice choice = 1;
}

// Ciphertext ballot for each candidate.
message CandidateBallot {
  string candidate = 1;
  Ballot ballot = 2;
}

// ZKP data to verify the format of ciphertext ballot.
message BallotProof {
  bytes format_proof = 1;
}

// Pair of candidate index and the ballot proof he received.
message StringToCandidateBallotProofPair {
  string key = 1;
  BallotProof value = 2;
}

// Do not use Map, cause unordered in blockchain
// Request of polling for all candidates.
message VoteRequest {
  VoteStorage vote = 1;
  repeated StringToCandidateBallotProofPair ballot_proof = 2;
  bytes range_proof = 3;
  bytes sum_balance_proof = 4;
}

// Polling for each candidates.
message VoteStorage {
  bytes signature = 1;
  Ballot blank_ballot = 2;
  Ballot rest_ballot = 3;
  repeated CandidateBallot voted_ballot = 4;
}

// Decrypted ballot and ZKP data to verify the process of counting of each counter.
message CountingPart {
  string counter_id = 1;
  bytes blinding_c2 = 2;
  bytes equality_proof = 3;
}

// Pair of candidate index and the decrypted ballot he received.
message StringToCountingPartPair {
  string key = 1;
  CountingPart value = 2;
}

// Decrypted ballot and ZKP data to verify the process of counting of all counters.
message DecryptedResultPartStorage {
  CountingPart blank_part = 1;
  repeated StringToCountingPartPair candidate_part = 2;
}

// Final result of all candidates.
message VoteResultStorage {
  repeated StringToInt64Pair result = 1;
}

// Final result of each candidate.
message StringToInt64Pair {
  string key = 1;
  int64 value = 2;
}